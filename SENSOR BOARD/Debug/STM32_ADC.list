
STM32_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000acc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c64  08000c64  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c64  08000c64  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000c64  08000c64  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c64  08000c64  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c64  08000c64  00010c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c68  08000c68  00010c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000c6c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000c70  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000c70  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000321b  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d0e  00000000  00000000  00023292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002d8  00000000  00000000  00023fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001f4  00000000  00000000  00024278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015325  00000000  00000000  0002446c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000046ff  00000000  00000000  00039791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082d75  00000000  00000000  0003de90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000007f8  00000000  00000000  000c0c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000c1400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000c4c 	.word	0x08000c4c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000c4c 	.word	0x08000c4c

080001d8 <MX_ADC_Init>:
 *
 * Returns: none
 *
 */
void MX_ADC_Init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	// Enable the ADC1 and TIM1 which will be the trigger
	RCC->APB2ENR |= (RCC_ADC1_EN);
 80001dc:	4b17      	ldr	r3, [pc, #92]	; (800023c <MX_ADC_Init+0x64>)
 80001de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001e0:	4a16      	ldr	r2, [pc, #88]	; (800023c <MX_ADC_Init+0x64>)
 80001e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001e6:	6453      	str	r3, [r2, #68]	; 0x44
	// Pre-scaler 6
	ADC->CCR |= (1 << 17);
 80001e8:	4b15      	ldr	r3, [pc, #84]	; (8000240 <MX_ADC_Init+0x68>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	4a14      	ldr	r2, [pc, #80]	; (8000240 <MX_ADC_Init+0x68>)
 80001ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f2:	6053      	str	r3, [r2, #4]
	// Resolution - 10 bit
	ADC1->CR1 |= (1 << 24);
 80001f4:	4b13      	ldr	r3, [pc, #76]	; (8000244 <MX_ADC_Init+0x6c>)
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	4a12      	ldr	r2, [pc, #72]	; (8000244 <MX_ADC_Init+0x6c>)
 80001fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001fe:	6053      	str	r3, [r2, #4]
	// Enable continuous mode
	ADC1->CR2 |= (1 << 1);
 8000200:	4b10      	ldr	r3, [pc, #64]	; (8000244 <MX_ADC_Init+0x6c>)
 8000202:	689b      	ldr	r3, [r3, #8]
 8000204:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <MX_ADC_Init+0x6c>)
 8000206:	f043 0302 	orr.w	r3, r3, #2
 800020a:	6093      	str	r3, [r2, #8]
	// 1st conversion should be CH4 (0b00100)
	ADC1->SQR3 |= (1 << 2);
 800020c:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <MX_ADC_Init+0x6c>)
 800020e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000210:	4a0c      	ldr	r2, [pc, #48]	; (8000244 <MX_ADC_Init+0x6c>)
 8000212:	f043 0304 	orr.w	r3, r3, #4
 8000216:	6353      	str	r3, [r2, #52]	; 0x34
	// Set scan mode
	ADC1->CR1 |= (1 << 8);
 8000218:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <MX_ADC_Init+0x6c>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	4a09      	ldr	r2, [pc, #36]	; (8000244 <MX_ADC_Init+0x6c>)
 800021e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000222:	6053      	str	r3, [r2, #4]
	// Enable interrupt for EOC
	// ADC1->CR1 |= (1 << 5);
	// NVIC_EnableIRQ(ADC_IRQn);
	// Power ON the ADC - ADON bit
	ADC1->CR2 |= (1 << 0);
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <MX_ADC_Init+0x6c>)
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	4a06      	ldr	r2, [pc, #24]	; (8000244 <MX_ADC_Init+0x6c>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6093      	str	r3, [r2, #8]
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40023800 	.word	0x40023800
 8000240:	40012300 	.word	0x40012300
 8000244:	40012000 	.word	0x40012000

08000248 <MX_GPIO_Init>:
 *
 * Returns: none
 *
 */
void MX_GPIO_Init(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (RCC_GPIOA_EN | RCC_GPIOB_EN);				// Enable clock for GPIO ports
 800024c:	4b2d      	ldr	r3, [pc, #180]	; (8000304 <MX_GPIO_Init+0xbc>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a2c      	ldr	r2, [pc, #176]	; (8000304 <MX_GPIO_Init+0xbc>)
 8000252:	f043 0303 	orr.w	r3, r3, #3
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= ((1 << 8) | (1 << 9));		// Analog mode for PA4
 8000258:	4b2b      	ldr	r3, [pc, #172]	; (8000308 <MX_GPIO_Init+0xc0>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a2a      	ldr	r2, [pc, #168]	; (8000308 <MX_GPIO_Init+0xc0>)
 800025e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000262:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((1 << 0) | (1 << 1));	// Analog mode for PB0
 8000264:	4b29      	ldr	r3, [pc, #164]	; (800030c <MX_GPIO_Init+0xc4>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a28      	ldr	r2, [pc, #160]	; (800030c <MX_GPIO_Init+0xc4>)
 800026a:	f043 0303 	orr.w	r3, r3, #3
 800026e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((1 << 2) | (1 << 3));		// Analog mode for PB1
 8000270:	4b26      	ldr	r3, [pc, #152]	; (800030c <MX_GPIO_Init+0xc4>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a25      	ldr	r2, [pc, #148]	; (800030c <MX_GPIO_Init+0xc4>)
 8000276:	f043 030c 	orr.w	r3, r3, #12
 800027a:	6013      	str	r3, [r2, #0]

	RCC->AHB1ENR |= (RCC_GPIOA_EN | RCC_GPIOE_EN);	// Enable clock for GPIO ports
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <MX_GPIO_Init+0xbc>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4a20      	ldr	r2, [pc, #128]	; (8000304 <MX_GPIO_Init+0xbc>)
 8000282:	f043 0311 	orr.w	r3, r3, #17
 8000286:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOE->MODER |= (1 << 6);						// PE3 configured as output pin
 8000288:	4b21      	ldr	r3, [pc, #132]	; (8000310 <MX_GPIO_Init+0xc8>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a20      	ldr	r2, [pc, #128]	; (8000310 <MX_GPIO_Init+0xc8>)
 800028e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000292:	6013      	str	r3, [r2, #0]

	GPIOA->MODER |= ((1 << 11) | (1 << 13) | (1 << 15));		// Configured as alternate function
 8000294:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <MX_GPIO_Init+0xc0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a1b      	ldr	r2, [pc, #108]	; (8000308 <MX_GPIO_Init+0xc0>)
 800029a:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 800029e:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0x0000FC00; // Set pin 5/6/7 to very high speed mode (0b11)
 80002a0:	4b19      	ldr	r3, [pc, #100]	; (8000308 <MX_GPIO_Init+0xc0>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	4a18      	ldr	r2, [pc, #96]	; (8000308 <MX_GPIO_Init+0xc0>)
 80002a6:	f443 437c 	orr.w	r3, r3, #64512	; 0xfc00
 80002aa:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] = ((0b0101 << 20)| (0b0101 << 24) | (0b0101 << 28));				// SPI1 function
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <MX_GPIO_Init+0xc0>)
 80002ae:	4a19      	ldr	r2, [pc, #100]	; (8000314 <MX_GPIO_Init+0xcc>)
 80002b0:	621a      	str	r2, [r3, #32]

	// LEDs
	// enable GPIOD clock, bit 3 on AHB1ENR
	// setup LEDs
	RCC->AHB1ENR |= (RCC_GPIOD_EN);	//Enable clock for GPIO ports
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_GPIO_Init+0xbc>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <MX_GPIO_Init+0xbc>)
 80002b8:	f043 0308 	orr.w	r3, r3, #8
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= GPIOD_PIN12_OP;					//Configured as output pin
 80002be:	4b16      	ldr	r3, [pc, #88]	; (8000318 <MX_GPIO_Init+0xd0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a15      	ldr	r2, [pc, #84]	; (8000318 <MX_GPIO_Init+0xd0>)
 80002c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002c8:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIOD_PIN13_OP;					// Configured as output pin
 80002ca:	4b13      	ldr	r3, [pc, #76]	; (8000318 <MX_GPIO_Init+0xd0>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a12      	ldr	r2, [pc, #72]	; (8000318 <MX_GPIO_Init+0xd0>)
 80002d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002d4:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIOD_PIN14_OP;					//Configured as output pin
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <MX_GPIO_Init+0xd0>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <MX_GPIO_Init+0xd0>)
 80002dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e0:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIOD_PIN15_OP;					// Configured as output pin
 80002e2:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <MX_GPIO_Init+0xd0>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a0c      	ldr	r2, [pc, #48]	; (8000318 <MX_GPIO_Init+0xd0>)
 80002e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002ec:	6013      	str	r3, [r2, #0]

	GPIOE->ODR |= (1 << 3); // disable
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <MX_GPIO_Init+0xc8>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <MX_GPIO_Init+0xc8>)
 80002f4:	f043 0308 	orr.w	r3, r3, #8
 80002f8:	6153      	str	r3, [r2, #20]
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40023800 	.word	0x40023800
 8000308:	40020000 	.word	0x40020000
 800030c:	40020400 	.word	0x40020400
 8000310:	40021000 	.word	0x40021000
 8000314:	55500000 	.word	0x55500000
 8000318:	40020c00 	.word	0x40020c00

0800031c <delay>:
 *
 * Returns: none
 *
 */
void delay(void)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10000; i++)
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
 8000326:	e00b      	b.n	8000340 <delay+0x24>
	{
	    for (int j = 0; j < 10; j++)
 8000328:	2300      	movs	r3, #0
 800032a:	603b      	str	r3, [r7, #0]
 800032c:	e002      	b.n	8000334 <delay+0x18>
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	2b09      	cmp	r3, #9
 8000338:	ddf9      	ble.n	800032e <delay+0x12>
	for (int i = 0; i < 10000; i++)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	3301      	adds	r3, #1
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f242 720f 	movw	r2, #9999	; 0x270f
 8000346:	4293      	cmp	r3, r2
 8000348:	ddee      	ble.n	8000328 <delay+0xc>
	    {

	    }
	}
}
 800034a:	bf00      	nop
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <twosComplementToASCII>:
 *
 * Returns: none
 *
 */
void twosComplementToASCII(int num)
{
 8000358:	b480      	push	{r7}
 800035a:	b08f      	sub	sp, #60	; 0x3c
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	char buffer[20];

    // Determine the sign
    int isNegative = (num < 0);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	0fdb      	lsrs	r3, r3, #31
 8000364:	b2db      	uxtb	r3, r3
 8000366:	62bb      	str	r3, [r7, #40]	; 0x28

    // If the number is negative, convert its absolute value
    if (isNegative) {
 8000368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036a:	2b00      	cmp	r3, #0
 800036c:	d002      	beq.n	8000374 <twosComplementToASCII+0x1c>
        num = -num;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	425b      	negs	r3, r3
 8000372:	607b      	str	r3, [r7, #4]
    }

    // Process digits in reverse order
    int i = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	637b      	str	r3, [r7, #52]	; 0x34
    do
    {
        int digit = num % 10;
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4b31      	ldr	r3, [pc, #196]	; (8000440 <twosComplementToASCII+0xe8>)
 800037c:	fb83 1302 	smull	r1, r3, r3, r2
 8000380:	1099      	asrs	r1, r3, #2
 8000382:	17d3      	asrs	r3, r2, #31
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	460b      	mov	r3, r1
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	440b      	add	r3, r1
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	1ad3      	subs	r3, r2, r3
 8000390:	627b      	str	r3, [r7, #36]	; 0x24
        buffer[i++] = '0' + digit;
 8000392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000394:	b2da      	uxtb	r2, r3
 8000396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000398:	1c59      	adds	r1, r3, #1
 800039a:	6379      	str	r1, [r7, #52]	; 0x34
 800039c:	3230      	adds	r2, #48	; 0x30
 800039e:	b2d2      	uxtb	r2, r2
 80003a0:	3338      	adds	r3, #56	; 0x38
 80003a2:	443b      	add	r3, r7
 80003a4:	f803 2c2c 	strb.w	r2, [r3, #-44]
        num /= 10;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a25      	ldr	r2, [pc, #148]	; (8000440 <twosComplementToASCII+0xe8>)
 80003ac:	fb82 1203 	smull	r1, r2, r2, r3
 80003b0:	1092      	asrs	r2, r2, #2
 80003b2:	17db      	asrs	r3, r3, #31
 80003b4:	1ad3      	subs	r3, r2, r3
 80003b6:	607b      	str	r3, [r7, #4]
    } while (num > 0);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	dcdc      	bgt.n	8000378 <twosComplementToASCII+0x20>

    // Add '-' for negative numbers
    if (isNegative) {
 80003be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d007      	beq.n	80003d4 <twosComplementToASCII+0x7c>
        buffer[i++] = '-';
 80003c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003c6:	1c5a      	adds	r2, r3, #1
 80003c8:	637a      	str	r2, [r7, #52]	; 0x34
 80003ca:	3338      	adds	r3, #56	; 0x38
 80003cc:	443b      	add	r3, r7
 80003ce:	222d      	movs	r2, #45	; 0x2d
 80003d0:	f803 2c2c 	strb.w	r2, [r3, #-44]
    }

    // Add null terminator
    buffer[i] = '\0';
 80003d4:	f107 020c 	add.w	r2, r7, #12
 80003d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003da:	4413      	add	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]

    // Reverse the string
    int start = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	633b      	str	r3, [r7, #48]	; 0x30
    int end = i - 1;
 80003e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003e6:	3b01      	subs	r3, #1
 80003e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (start < end) {
 80003ea:	e01e      	b.n	800042a <twosComplementToASCII+0xd2>
        // Swap characters
        char temp = buffer[start];
 80003ec:	f107 020c 	add.w	r2, r7, #12
 80003f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003f2:	4413      	add	r3, r2
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        buffer[start] = buffer[end];
 80003fa:	f107 020c 	add.w	r2, r7, #12
 80003fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000400:	4413      	add	r3, r2
 8000402:	7819      	ldrb	r1, [r3, #0]
 8000404:	f107 020c 	add.w	r2, r7, #12
 8000408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800040a:	4413      	add	r3, r2
 800040c:	460a      	mov	r2, r1
 800040e:	701a      	strb	r2, [r3, #0]
        buffer[end] = temp;
 8000410:	f107 020c 	add.w	r2, r7, #12
 8000414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000416:	4413      	add	r3, r2
 8000418:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800041c:	701a      	strb	r2, [r3, #0]

        // Move towards the center
        start++;
 800041e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000420:	3301      	adds	r3, #1
 8000422:	633b      	str	r3, [r7, #48]	; 0x30
        end--;
 8000424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000426:	3b01      	subs	r3, #1
 8000428:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (start < end) {
 800042a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800042c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800042e:	429a      	cmp	r2, r3
 8000430:	dbdc      	blt.n	80003ec <twosComplementToASCII+0x94>
    }
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	373c      	adds	r7, #60	; 0x3c
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	66666667 	.word	0x66666667

08000444 <spi_write>:
 * @references
 * 1) https://github.com/fcayci/stm32f4-bare-metal/blob/master/projects/spi/spi.c
 *
 */
void spi_write(uint8_t reg, uint8_t data)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	460a      	mov	r2, r1
 800044e:	71fb      	strb	r3, [r7, #7]
 8000450:	4613      	mov	r3, r2
 8000452:	71bb      	strb	r3, [r7, #6]
    GPIOE->ODR &= ~(1U << 3); 	// enable
 8000454:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <spi_write+0x74>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a17      	ldr	r2, [pc, #92]	; (80004b8 <spi_write+0x74>)
 800045a:	f023 0308 	bic.w	r3, r3, #8
 800045e:	6153      	str	r3, [r2, #20]
    // Bit 15 is 0 for write
    uint32_t frame = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
    frame = data;
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	60fb      	str	r3, [r7, #12]
    frame |= (uint16_t)(reg << 8);
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	b29b      	uxth	r3, r3
 800046c:	021b      	lsls	r3, r3, #8
 800046e:	b29b      	uxth	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4313      	orrs	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    // Send data
    SPI1->DR = frame;
 8000478:	4a10      	ldr	r2, [pc, #64]	; (80004bc <spi_write+0x78>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	60d3      	str	r3, [r2, #12]
    // wait until transmit is done
    while (!(SPI1->SR & (1 << 1)));
 800047e:	bf00      	nop
 8000480:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <spi_write+0x78>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	f003 0302 	and.w	r3, r3, #2
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f9      	beq.n	8000480 <spi_write+0x3c>
    // wait until rx buf is not empty
    while (!(SPI1->SR & (1 << 0)));
 800048c:	bf00      	nop
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <spi_write+0x78>)
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	2b00      	cmp	r3, #0
 8000498:	d0f9      	beq.n	800048e <spi_write+0x4a>
    GPIOE->ODR |= (1 << 3); 	// disable
 800049a:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <spi_write+0x74>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <spi_write+0x74>)
 80004a0:	f043 0308 	orr.w	r3, r3, #8
 80004a4:	6153      	str	r3, [r2, #20]
    (void)SPI1->DR; // dummy read
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <spi_write+0x78>)
 80004a8:	68db      	ldr	r3, [r3, #12]
}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40013000 	.word	0x40013000

080004c0 <spi_read>:
 * @references
 * 1) https://github.com/fcayci/stm32f4-bare-metal/blob/master/projects/spi/spi.c
 *
 */
uint8_t spi_read(uint8_t reg)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
    GPIOE->ODR &= ~(1U << 3); 	// enable
 80004ca:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <spi_read+0x78>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a1a      	ldr	r2, [pc, #104]	; (8000538 <spi_read+0x78>)
 80004d0:	f023 0308 	bic.w	r3, r3, #8
 80004d4:	6153      	str	r3, [r2, #20]
    // bit 15 is 1 for read
    uint16_t frame = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	81fb      	strh	r3, [r7, #14]
    frame |= (uint16_t)(reg << 8);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	021b      	lsls	r3, r3, #8
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	89fb      	ldrh	r3, [r7, #14]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	81fb      	strh	r3, [r7, #14]
    frame |= (1 << 15); 		// read bit
 80004e8:	89fb      	ldrh	r3, [r7, #14]
 80004ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80004ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80004f2:	81fb      	strh	r3, [r7, #14]
    // Send data
    SPI1->DR = frame;
 80004f4:	4a11      	ldr	r2, [pc, #68]	; (800053c <spi_read+0x7c>)
 80004f6:	89fb      	ldrh	r3, [r7, #14]
 80004f8:	60d3      	str	r3, [r2, #12]
    // wait until tx buf is empty
    while (!(SPI1->SR & (1 << 1)));
 80004fa:	bf00      	nop
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <spi_read+0x7c>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	f003 0302 	and.w	r3, r3, #2
 8000504:	2b00      	cmp	r3, #0
 8000506:	d0f9      	beq.n	80004fc <spi_read+0x3c>
    // wait until rx buf is not empty
    while (!(SPI1->SR & (1 << 0)));
 8000508:	bf00      	nop
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <spi_read+0x7c>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0f9      	beq.n	800050a <spi_read+0x4a>
    uint8_t b = (uint8_t)SPI1->DR;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <spi_read+0x7c>)
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	737b      	strb	r3, [r7, #13]
    GPIOE->ODR |= (1 << 3); 	// disable
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <spi_read+0x78>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	4a05      	ldr	r2, [pc, #20]	; (8000538 <spi_read+0x78>)
 8000522:	f043 0308 	orr.w	r3, r3, #8
 8000526:	6153      	str	r3, [r2, #20]
    return b;
 8000528:	7b7b      	ldrb	r3, [r7, #13]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	40013000 	.word	0x40013000

08000540 <SPI1_Init>:
 * @references
 * 1) https://github.com/fcayci/stm32f4-bare-metal/blob/master/projects/spi/spi.c
 *
 */
void SPI1_Init(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 12);		// Enable SPI1 clock
 8000544:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <SPI1_Init+0x7c>)
 8000546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000548:	4a1c      	ldr	r2, [pc, #112]	; (80005bc <SPI1_Init+0x7c>)
 800054a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800054e:	6453      	str	r3, [r2, #68]	; 0x44
    // clock polarity - CPOL bit 1
    SPI1->CR1 |= (1 << 1);
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <SPI1_Init+0x80>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <SPI1_Init+0x80>)
 8000556:	f043 0302 	orr.w	r3, r3, #2
 800055a:	6013      	str	r3, [r2, #0]
    // clock phase - CPHA bit 1
    SPI1->CR1 |= (1 << 0);
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <SPI1_Init+0x80>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <SPI1_Init+0x80>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	6013      	str	r3, [r2, #0]
	// CRC disabled
	SPI1->CR1 |= (1 << 11);		// 16-bit data frame format
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <SPI1_Init+0x80>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <SPI1_Init+0x80>)
 800056e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000572:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~((1 << 3) | (1 << 4) | (1 << 5));				// Baud rate - fPCLK/2
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <SPI1_Init+0x80>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <SPI1_Init+0x80>)
 800057a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800057e:	6013      	str	r3, [r2, #0]
	//SPI1->CR1 = (0x4 << 3); 	// set baud rate to fPCLK/32
	SPI1->CR1 |= (1 << 9);		// Software slave management enabled
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <SPI1_Init+0x80>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <SPI1_Init+0x80>)
 8000586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1 << 8);		// Slave selected
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <SPI1_Init+0x80>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <SPI1_Init+0x80>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1 << 2);		// Master configuration
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <SPI1_Init+0x80>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <SPI1_Init+0x80>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1 << 6);		// SPI enabled
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <SPI1_Init+0x80>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <SPI1_Init+0x80>)
 80005aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40013000 	.word	0x40013000

080005c4 <acc_compute>:
 *
 * Returns: none
 *
 */
void acc_compute(int acc_xval, int acc_yval, int acc_zval, int16_t gyro_x_data, int16_t gyro_y_data, int16_t gyro_z_data)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	807b      	strh	r3, [r7, #2]
	static enum States status = DEFAULT;
	static enum States prev_status = DEFAULT;
	// If motion detected
	if ((gyro_x_data > 10) || (gyro_y_data > 10) || (gyro_z_data > 10) || (gyro_x_data < -10) || (gyro_y_data < -10) || (gyro_z_data < -10))
 80005d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005d6:	2b0a      	cmp	r3, #10
 80005d8:	dc16      	bgt.n	8000608 <acc_compute+0x44>
 80005da:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80005de:	2b0a      	cmp	r3, #10
 80005e0:	dc12      	bgt.n	8000608 <acc_compute+0x44>
 80005e2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80005e6:	2b0a      	cmp	r3, #10
 80005e8:	dc0e      	bgt.n	8000608 <acc_compute+0x44>
 80005ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005ee:	f113 0f0a 	cmn.w	r3, #10
 80005f2:	db09      	blt.n	8000608 <acc_compute+0x44>
 80005f4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80005f8:	f113 0f0a 	cmn.w	r3, #10
 80005fc:	db04      	blt.n	8000608 <acc_compute+0x44>
 80005fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000602:	f113 0f0a 	cmn.w	r3, #10
 8000606:	da20      	bge.n	800064a <acc_compute+0x86>
	{
		// 1st for up
		if (acc_yval > 70)
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	2b46      	cmp	r3, #70	; 0x46
 800060c:	dd03      	ble.n	8000616 <acc_compute+0x52>
		{
			status = UP;
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <acc_compute+0xc0>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	e019      	b.n	800064a <acc_compute+0x86>
		}
		// For down
		else if (acc_yval < (-40))
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	f113 0f28 	cmn.w	r3, #40	; 0x28
 800061c:	da03      	bge.n	8000626 <acc_compute+0x62>
		{
			status = DOWN;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <acc_compute+0xc0>)
 8000620:	2202      	movs	r2, #2
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e011      	b.n	800064a <acc_compute+0x86>
		}
		// For left
		else if (acc_zval < (-50))
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f113 0f32 	cmn.w	r3, #50	; 0x32
 800062c:	da03      	bge.n	8000636 <acc_compute+0x72>
		{
			status = LEFT;
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <acc_compute+0xc0>)
 8000630:	2203      	movs	r2, #3
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	e009      	b.n	800064a <acc_compute+0x86>
		}
		// For right
		else if (acc_zval > 55)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b37      	cmp	r3, #55	; 0x37
 800063a:	dd03      	ble.n	8000644 <acc_compute+0x80>
		{
			status = RIGHT;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <acc_compute+0xc0>)
 800063e:	2204      	movs	r2, #4
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	e002      	b.n	800064a <acc_compute+0x86>
		}
		else
		{
			status = DEFAULT;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <acc_compute+0xc0>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
		}
	}
	if (status != prev_status)
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <acc_compute+0xc0>)
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <acc_compute+0xc4>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	429a      	cmp	r2, r3
 8000654:	d00c      	beq.n	8000670 <acc_compute+0xac>
	{
		USART2->DR = status + '0' ;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <acc_compute+0xc0>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <acc_compute+0xc8>)
 8000660:	605a      	str	r2, [r3, #4]
		while(((USART2->SR)& (1U<<6)) == 0);
 8000662:	bf00      	nop
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <acc_compute+0xc8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f9      	beq.n	8000664 <acc_compute+0xa0>
	}
	prev_status = status;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <acc_compute+0xc0>)
 8000672:	781a      	ldrb	r2, [r3, #0]
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <acc_compute+0xc4>)
 8000676:	701a      	strb	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	20000020 	.word	0x20000020
 8000688:	20000021 	.word	0x20000021
 800068c:	40004400 	.word	0x40004400

08000690 <convertAndTransmit>:
 *
 * Returns: none
 *
 */
int convertAndTransmit(uint8_t *buffer)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
    // Start ADC conversion
    ADC1->CR2 |= (1 << 30);
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <convertAndTransmit+0x44>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <convertAndTransmit+0x44>)
 800069e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80006a2:	6093      	str	r3, [r2, #8]
    // Wait until conversion is finish
    while (!((ADC1->CR2) & (0x0002)));
 80006a4:	bf00      	nop
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <convertAndTransmit+0x44>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0f9      	beq.n	80006a6 <convertAndTransmit+0x16>

    int value = ADC1->DR;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <convertAndTransmit+0x44>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	60fb      	str	r3, [r7, #12]
    value = value - 512;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80006be:	60fb      	str	r3, [r7, #12]
    int result = value;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	60bb      	str	r3, [r7, #8]
    twosComplementToASCII(value);
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f7ff fe47 	bl	8000358 <twosComplementToASCII>
    // Transmit the characters via USART
    for (int i = p - 1; i >= 0; i--) {
        print_char(buffer[i]);
    }*/

    return result;
 80006ca:	68bb      	ldr	r3, [r7, #8]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40012000 	.word	0x40012000

080006d8 <main>:
#include "timer.h"

int16_t rbuf[6];

int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af02      	add	r7, sp, #8

  // Initializations
  MX_GPIO_Init();
 80006de:	f7ff fdb3 	bl	8000248 <MX_GPIO_Init>
  MX_ADC_Init();
 80006e2:	f7ff fd79 	bl	80001d8 <MX_ADC_Init>
  uart_init();
 80006e6:	f000 f9a1 	bl	8000a2c <uart_init>
  MX_TIM2_Init();
 80006ea:	f000 f91b 	bl	8000924 <MX_TIM2_Init>
  SPI1_Init();
 80006ee:	f7ff ff27 	bl	8000540 <SPI1_Init>

  uint8_t xbuffer[4] = {0}, ybuffer[4] = {0}, zbuffer[4] = {0};
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
  int xval_acc = 0, yval_acc = 0, zval_acc = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  int16_t gyro_x_data = 0, gyro_y_data = 0, gyro_z_data = 0, who_am_i = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800070e:	2300      	movs	r3, #0
 8000710:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000712:	2300      	movs	r3, #0
 8000714:	847b      	strh	r3, [r7, #34]	; 0x22
 8000716:	2300      	movs	r3, #0
 8000718:	827b      	strh	r3, [r7, #18]

  // reboot memory
  spi_write(L3GD20_CTRL_REG5_ADDR, 0x90);
 800071a:	2190      	movs	r1, #144	; 0x90
 800071c:	2024      	movs	r0, #36	; 0x24
 800071e:	f7ff fe91 	bl	8000444 <spi_write>
  // Enable axis & normal mode
  spi_write(L3GD20_CTRL_REG1_ADDR, 0x0F);
 8000722:	210f      	movs	r1, #15
 8000724:	2020      	movs	r0, #32
 8000726:	f7ff fe8d 	bl	8000444 <spi_write>
  // read who am i
  who_am_i = (int8_t)spi_read(L3GD20_WHO_AM_I_ADDR);
 800072a:	200f      	movs	r0, #15
 800072c:	f7ff fec8 	bl	80004c0 <spi_read>
 8000730:	4603      	mov	r3, r0
 8000732:	b25b      	sxtb	r3, r3
 8000734:	827b      	strh	r3, [r7, #18]

  while (1)
  {
	  if (tim_flag)
 8000736:	4b4b      	ldr	r3, [pc, #300]	; (8000864 <main+0x18c>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0fa      	beq.n	8000736 <main+0x5e>
	  {
		  // 1st conversion should be CH4 (0b00100)
		  ADC1->SQR3 &= ~((1 << 3) | (1 << 0));
 8000740:	4b49      	ldr	r3, [pc, #292]	; (8000868 <main+0x190>)
 8000742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000744:	4a48      	ldr	r2, [pc, #288]	; (8000868 <main+0x190>)
 8000746:	f023 0309 	bic.w	r3, r3, #9
 800074a:	6353      	str	r3, [r2, #52]	; 0x34
		  ADC1->SQR3 |= (1 << 2);
 800074c:	4b46      	ldr	r3, [pc, #280]	; (8000868 <main+0x190>)
 800074e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000750:	4a45      	ldr	r2, [pc, #276]	; (8000868 <main+0x190>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6353      	str	r3, [r2, #52]	; 0x34
		  xval_acc = convertAndTransmit(xbuffer);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff97 	bl	8000690 <convertAndTransmit>
 8000762:	61f8      	str	r0, [r7, #28]

		  // 2nd conversion should be CH8 (0b01000)
		  ADC1->SQR3 &= ~(1 << 2);
 8000764:	4b40      	ldr	r3, [pc, #256]	; (8000868 <main+0x190>)
 8000766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000768:	4a3f      	ldr	r2, [pc, #252]	; (8000868 <main+0x190>)
 800076a:	f023 0304 	bic.w	r3, r3, #4
 800076e:	6353      	str	r3, [r2, #52]	; 0x34
		  ADC1->SQR3 |= (1 << 3);
 8000770:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <main+0x190>)
 8000772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000774:	4a3c      	ldr	r2, [pc, #240]	; (8000868 <main+0x190>)
 8000776:	f043 0308 	orr.w	r3, r3, #8
 800077a:	6353      	str	r3, [r2, #52]	; 0x34
		  yval_acc = convertAndTransmit(ybuffer);
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff85 	bl	8000690 <convertAndTransmit>
 8000786:	61b8      	str	r0, [r7, #24]

		  // 3rd conversion should be CH9 (0b01001)
		  ADC1->SQR3 |= (1 << 0);
 8000788:	4b37      	ldr	r3, [pc, #220]	; (8000868 <main+0x190>)
 800078a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800078c:	4a36      	ldr	r2, [pc, #216]	; (8000868 <main+0x190>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	6353      	str	r3, [r2, #52]	; 0x34
		  zval_acc = convertAndTransmit(zbuffer);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff7a 	bl	8000690 <convertAndTransmit>
 800079c:	6178      	str	r0, [r7, #20]

		  // Read values from the gyroscope
		  gyro_x_data = (int8_t)spi_read(L3GD20_OUT_X_H_ADDR);
 800079e:	2029      	movs	r0, #41	; 0x29
 80007a0:	f7ff fe8e 	bl	80004c0 <spi_read>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	84fb      	strh	r3, [r7, #38]	; 0x26
		  gyro_y_data = (int8_t)spi_read(L3GD20_OUT_Y_H_ADDR);
 80007aa:	202b      	movs	r0, #43	; 0x2b
 80007ac:	f7ff fe88 	bl	80004c0 <spi_read>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		  gyro_z_data = (int8_t)spi_read(L3GD20_OUT_Z_H_ADDR);
 80007b6:	202d      	movs	r0, #45	; 0x2d
 80007b8:	f7ff fe82 	bl	80004c0 <spi_read>
 80007bc:	4603      	mov	r3, r0
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	847b      	strh	r3, [r7, #34]	; 0x22

	      if (gyro_x_data & (1 << 15))
 80007c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	da0a      	bge.n	80007e0 <main+0x108>
	      {
	    	  gyro_x_data = (int16_t)(~((uint16_t)gyro_x_data) + 1); // Perform two's complement for negative values
 80007ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007cc:	425b      	negs	r3, r3
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	84fb      	strh	r3, [r7, #38]	; 0x26
	          GPIOD-> BSRR |= PIN15 << 16;		// Turn OFF the blue LED
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <main+0x194>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a25      	ldr	r2, [pc, #148]	; (800086c <main+0x194>)
 80007d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	e005      	b.n	80007ec <main+0x114>
	      }
	      else
	      {
	    	  // Positive value remains unchanged
	    	  GPIOD-> BSRR |= PIN15;			// Turn ON the blue LED
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <main+0x194>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a21      	ldr	r2, [pc, #132]	; (800086c <main+0x194>)
 80007e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ea:	6193      	str	r3, [r2, #24]
	      }

	      if (gyro_y_data & (1 << 15))
 80007ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	da0a      	bge.n	800080a <main+0x132>
	      {
	    	 gyro_y_data = (int16_t)(~((uint16_t)gyro_y_data) + 1); // Perform two's complement for negative values
 80007f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007f6:	425b      	negs	r3, r3
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	84bb      	strh	r3, [r7, #36]	; 0x24
	         GPIOD-> BSRR |= PIN12 << 16;		// Turn OFF the green LED
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <main+0x194>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a1a      	ldr	r2, [pc, #104]	; (800086c <main+0x194>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	e005      	b.n	8000816 <main+0x13e>
	      }
	      else
	      {
	         GPIOD-> BSRR |= PIN12;				// Turn ON the green LED
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <main+0x194>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <main+0x194>)
 8000810:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000814:	6193      	str	r3, [r2, #24]
	      }

	      if (gyro_z_data & (1 << 15))
 8000816:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800081a:	2b00      	cmp	r3, #0
 800081c:	da0a      	bge.n	8000834 <main+0x15c>
	      {
	    	  gyro_z_data = (int16_t)(~((uint16_t)gyro_z_data) + 1); // Perform two's complement for negative values
 800081e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000820:	425b      	negs	r3, r3
 8000822:	b29b      	uxth	r3, r3
 8000824:	847b      	strh	r3, [r7, #34]	; 0x22
	          GPIOD-> BSRR |= PIN13 << 16;		// Turn OFF the green LED
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <main+0x194>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <main+0x194>)
 800082c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000830:	6193      	str	r3, [r2, #24]
 8000832:	e005      	b.n	8000840 <main+0x168>
	      }
	      else
	      {
	          // Positive value remains unchanged
	          GPIOD-> BSRR |= PIN13;			// Turn ON the green LED
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <main+0x194>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <main+0x194>)
 800083a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800083e:	6193      	str	r3, [r2, #24]
	      }
	      acc_compute(xval_acc, yval_acc, zval_acc, gyro_x_data, gyro_y_data, gyro_z_data);
 8000840:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8000844:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	4613      	mov	r3, r2
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	69b9      	ldr	r1, [r7, #24]
 8000856:	69f8      	ldr	r0, [r7, #28]
 8000858:	f7ff feb4 	bl	80005c4 <acc_compute>
		  delay();
 800085c:	f7ff fd5e 	bl	800031c <delay>
	  if (tim_flag)
 8000860:	e769      	b.n	8000736 <main+0x5e>
 8000862:	bf00      	nop
 8000864:	20000022 	.word	0x20000022
 8000868:	40012000 	.word	0x40012000
 800086c:	40020c00 	.word	0x40020c00

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f98e 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <SystemInit+0x20>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <SystemInit+0x20>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	db0b      	blt.n	8000912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	f003 021f 	and.w	r2, r3, #31
 8000900:	4907      	ldr	r1, [pc, #28]	; (8000920 <__NVIC_EnableIRQ+0x38>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	095b      	lsrs	r3, r3, #5
 8000908:	2001      	movs	r0, #1
 800090a:	fa00 f202 	lsl.w	r2, r0, r2
 800090e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000e100 	.word	0xe000e100

08000924 <MX_TIM2_Init>:
 *
 * Returns: none
 *
 */
void MX_TIM2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_TIM2_EN;					//Enable clock for TIM2
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_TIM2_Init+0x50>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	4a11      	ldr	r2, [pc, #68]	; (8000974 <MX_TIM2_Init+0x50>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->DIER |= TIM2_DIER_UIE;					//Update Interrupt Enabled
 8000934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	60d3      	str	r3, [r2, #12]
	TIM2->PSC = 1599;								//Gives a clock of (16M/1599) = 10000Hz
 8000944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000948:	f240 623f 	movw	r2, #1599	; 0x63f
 800094c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 4999;									//For 400ms
 800094e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000952:	f241 3287 	movw	r2, #4999	; 0x1387
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
	NVIC_EnableIRQ(TIM2_IRQn);						// Enable the interrupt
 8000958:	201c      	movs	r0, #28
 800095a:	f7ff ffc5 	bl	80008e8 <__NVIC_EnableIRQ>
	TIM2->CR1 |= TIM2_CR1_CEN;						//Counter enable for Timer 2
 800095e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6013      	str	r3, [r2, #0]
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <TIM2_IRQHandler>:
 *
 * Returns: none
 *
 */
void TIM2_IRQHandler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
	tim_flag = 1;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <TIM2_IRQHandler+0x20>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
	TIM2->SR = ~(TIM2_SR_UIF);			//Reseting the interrupt flag
 8000982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000986:	f06f 0201 	mvn.w	r2, #1
 800098a:	611a      	str	r2, [r3, #16]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000022 	.word	0x20000022

0800099c <__NVIC_EnableIRQ>:
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	db0b      	blt.n	80009c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	f003 021f 	and.w	r2, r3, #31
 80009b4:	4907      	ldr	r1, [pc, #28]	; (80009d4 <__NVIC_EnableIRQ+0x38>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	2001      	movs	r0, #1
 80009be:	fa00 f202 	lsl.w	r2, r0, r2
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	; (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <uart_init>:
 *
 * Returns: none
 *
 */
void uart_init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	  RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <uart_init+0x78>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <uart_init+0x78>)
 8000a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
	  RCC->AHB1ENR |=  RCC_AHB1ENR_GPIOAEN;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <uart_init+0x78>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <uart_init+0x78>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6313      	str	r3, [r2, #48]	; 0x30
	  GPIOA->MODER |= (2U <<4)| (2U <<6);
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <uart_init+0x7c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <uart_init+0x7c>)
 8000a4e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a52:	6013      	str	r3, [r2, #0]
	  GPIOA->AFR[0] |= (7U <<8) | (7U <<12);
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <uart_init+0x7c>)
 8000a56:	6a1b      	ldr	r3, [r3, #32]
 8000a58:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <uart_init+0x7c>)
 8000a5a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000a5e:	6213      	str	r3, [r2, #32]
	  USART2->CR1 |= USART_CR1_UE_Msk;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <uart_init+0x80>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	4a11      	ldr	r2, [pc, #68]	; (8000aac <uart_init+0x80>)
 8000a66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a6a:	60d3      	str	r3, [r2, #12]
	  USART2->BRR = 0x683;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <uart_init+0x80>)
 8000a6e:	f240 6283 	movw	r2, #1667	; 0x683
 8000a72:	609a      	str	r2, [r3, #8]
	  USART2->CR1 |= (USART_CR1_EN | USART_CR1_RXNE_INTERRUPT | MODE_SET(1)) ;
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <uart_init+0x80>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <uart_init+0x80>)
 8000a7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a7e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000a82:	60d3      	str	r3, [r2, #12]

	  USART2->CR1 |= MODE_SET(RX_EN) | MODE_SET(TX_EN);
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <uart_init+0x80>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	4a08      	ldr	r2, [pc, #32]	; (8000aac <uart_init+0x80>)
 8000a8a:	f043 030c 	orr.w	r3, r3, #12
 8000a8e:	60d3      	str	r3, [r2, #12]
	  NVIC_SetPriority(USART2_IRQn,2);
 8000a90:	2102      	movs	r1, #2
 8000a92:	2026      	movs	r0, #38	; 0x26
 8000a94:	f7ff ffa0 	bl	80009d8 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(USART2_IRQn);
 8000a98:	2026      	movs	r0, #38	; 0x26
 8000a9a:	f7ff ff7f 	bl	800099c <__NVIC_EnableIRQ>



}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40004400 	.word	0x40004400

08000ab0 <USART2_IRQHandler>:
 *
 * Returns: none
 *
 */
void USART2_IRQHandler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
	USART2->CR1&= ~(USART_CR1_RXNE_INTERRUPT); /*Disable interrupt*/
 8000ab6:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <USART2_IRQHandler+0xd0>)
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	4a31      	ldr	r2, [pc, #196]	; (8000b80 <USART2_IRQHandler+0xd0>)
 8000abc:	f023 0320 	bic.w	r3, r3, #32
 8000ac0:	60d3      	str	r3, [r2, #12]
	uint8_t data = USART2->DR;					/*Copy the data received*/
 8000ac2:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <USART2_IRQHandler+0xd0>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	71fb      	strb	r3, [r7, #7]
 	USART2->DR = data;
 8000ac8:	4a2d      	ldr	r2, [pc, #180]	; (8000b80 <USART2_IRQHandler+0xd0>)
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	6053      	str	r3, [r2, #4]
	while(((USART2->SR)& (1U<<6)) == 0); /*TC (Transmission complete bit )*/
 8000ace:	bf00      	nop
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <USART2_IRQHandler+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0f9      	beq.n	8000ad0 <USART2_IRQHandler+0x20>
	if(data == 1)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d142      	bne.n	8000b68 <USART2_IRQHandler+0xb8>
	{
		GPIOD-> BSRR |= PIN15;			// Turn ON the blue LED
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aec:	6193      	str	r3, [r2, #24]
		GPIOD-> BSRR |= PIN12;			// Turn ON the green LED
 8000aee:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a24      	ldr	r2, [pc, #144]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000af8:	6193      	str	r3, [r2, #24]
		GPIOD-> BSRR |= PIN13;			// Turn ON the green LED
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000b00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b04:	6193      	str	r3, [r2, #24]
		GPIOD-> BSRR |= PIN14;			// Turn ON the red LED
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	6193      	str	r3, [r2, #24]
		for(int i = 0; i < 1000; i++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	e00b      	b.n	8000b30 <USART2_IRQHandler+0x80>
		{
			for(int j = 0;j < 100; j++);
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	e002      	b.n	8000b24 <USART2_IRQHandler+0x74>
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	2b63      	cmp	r3, #99	; 0x63
 8000b28:	ddf9      	ble.n	8000b1e <USART2_IRQHandler+0x6e>
		for(int i = 0; i < 1000; i++)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b36:	dbef      	blt.n	8000b18 <USART2_IRQHandler+0x68>
		}
		GPIOD-> BSRR |= PIN13 << 16;	// Turn OFF the green LED
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000b3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b42:	6193      	str	r3, [r2, #24]
		GPIOD-> BSRR |= PIN12 << 16;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	6193      	str	r3, [r2, #24]
		GPIOD-> BSRR |= PIN14 << 16;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000b56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b5a:	6193      	str	r3, [r2, #24]
		GPIOD-> BSRR |= PIN15 << 16;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <USART2_IRQHandler+0xd4>)
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	6193      	str	r3, [r2, #24]
	}
	USART2->CR1|= (USART_CR1_RXNE_INTERRUPT);
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <USART2_IRQHandler+0xd0>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <USART2_IRQHandler+0xd0>)
 8000b6e:	f043 0320 	orr.w	r3, r3, #32
 8000b72:	60d3      	str	r3, [r2, #12]

}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40020c00 	.word	0x40020c00

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb2:	f7ff fe87 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f000 f825 	bl	8000c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fd8d 	bl	80006d8 <main>
  bx  lr    
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000bcc:	08000c6c 	.word	0x08000c6c
  ldr r2, =_sbss
 8000bd0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000bd4:	20000028 	.word	0x20000028

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000024 	.word	0x20000024

08000c04 <__libc_init_array>:
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	4d0d      	ldr	r5, [pc, #52]	; (8000c3c <__libc_init_array+0x38>)
 8000c08:	4c0d      	ldr	r4, [pc, #52]	; (8000c40 <__libc_init_array+0x3c>)
 8000c0a:	1b64      	subs	r4, r4, r5
 8000c0c:	10a4      	asrs	r4, r4, #2
 8000c0e:	2600      	movs	r6, #0
 8000c10:	42a6      	cmp	r6, r4
 8000c12:	d109      	bne.n	8000c28 <__libc_init_array+0x24>
 8000c14:	4d0b      	ldr	r5, [pc, #44]	; (8000c44 <__libc_init_array+0x40>)
 8000c16:	4c0c      	ldr	r4, [pc, #48]	; (8000c48 <__libc_init_array+0x44>)
 8000c18:	f000 f818 	bl	8000c4c <_init>
 8000c1c:	1b64      	subs	r4, r4, r5
 8000c1e:	10a4      	asrs	r4, r4, #2
 8000c20:	2600      	movs	r6, #0
 8000c22:	42a6      	cmp	r6, r4
 8000c24:	d105      	bne.n	8000c32 <__libc_init_array+0x2e>
 8000c26:	bd70      	pop	{r4, r5, r6, pc}
 8000c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c2c:	4798      	blx	r3
 8000c2e:	3601      	adds	r6, #1
 8000c30:	e7ee      	b.n	8000c10 <__libc_init_array+0xc>
 8000c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c36:	4798      	blx	r3
 8000c38:	3601      	adds	r6, #1
 8000c3a:	e7f2      	b.n	8000c22 <__libc_init_array+0x1e>
 8000c3c:	08000c64 	.word	0x08000c64
 8000c40:	08000c64 	.word	0x08000c64
 8000c44:	08000c64 	.word	0x08000c64
 8000c48:	08000c68 	.word	0x08000c68

08000c4c <_init>:
 8000c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4e:	bf00      	nop
 8000c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c52:	bc08      	pop	{r3}
 8000c54:	469e      	mov	lr, r3
 8000c56:	4770      	bx	lr

08000c58 <_fini>:
 8000c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5a:	bf00      	nop
 8000c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c5e:	bc08      	pop	{r3}
 8000c60:	469e      	mov	lr, r3
 8000c62:	4770      	bx	lr
